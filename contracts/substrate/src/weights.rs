//! Autogenerated weights for pallet_cross_chain_bridge
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2024-01-01, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `benchmark-host`, CPU: `Intel(R) Core(TM) i7-8700K CPU @ 3.70GHz`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ./target/production/substrate
// benchmark
// pallet
// --chain=dev
// --steps=50
// --repeat=20
// --pallet=pallet_cross_chain_bridge
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --output=./pallets/cross-chain-bridge/src/weights.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_cross_chain_bridge.
pub trait WeightInfo {
    fn register_token() -> Weight;
    fn mint_tokens() -> Weight;
    fn burn_tokens() -> Weight;
    fn add_validator() -> Weight;
    fn remove_validator() -> Weight;
    fn update_threshold() -> Weight;
}

/// Weights for pallet_cross_chain_bridge using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
    /// Storage: CrossChainBridge BridgedTokens (r:1 w:1)
    /// Proof: CrossChainBridge BridgedTokens (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
    /// Storage: Assets Asset (r:1 w:1)
    /// Proof: Assets Asset (max_values: None, max_size: Some(210), added: 2685, mode: MaxEncodedLen)
    /// Storage: Assets Metadata (r:1 w:1)
    /// Proof: Assets Metadata (max_values: None, max_size: Some(140), added: 2615, mode: MaxEncodedLen)
    fn register_token() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `42`
        //  Estimated: `3675`
        // Minimum execution time: 25_000_000 picoseconds.
        Weight::from_parts(26_000_000, 3675)
            .saturating_add(T::DbWeight::get().reads(3_u64))
            .saturating_add(T::DbWeight::get().writes(3_u64))
    }

    /// Storage: CrossChainBridge ProcessedEthereumTxs (r:1 w:1)
    /// Proof: CrossChainBridge ProcessedEthereumTxs (max_values: None, max_size: Some(33), added: 2508, mode: MaxEncodedLen)
    /// Storage: CrossChainBridge BridgedTokens (r:1 w:1)
    /// Proof: CrossChainBridge BridgedTokens (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
    /// Storage: Assets Asset (r:1 w:1)
    /// Proof: Assets Asset (max_values: None, max_size: Some(210), added: 2685, mode: MaxEncodedLen)
    /// Storage: Assets Account (r:1 w:1)
    /// Proof: Assets Account (max_values: None, max_size: Some(134), added: 2609, mode: MaxEncodedLen)
    fn mint_tokens() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `351`
        //  Estimated: `3675`
        // Minimum execution time: 35_000_000 picoseconds.
        Weight::from_parts(36_000_000, 3675)
            .saturating_add(T::DbWeight::get().reads(4_u64))
            .saturating_add(T::DbWeight::get().writes(4_u64))
    }

    /// Storage: CrossChainBridge AssetToEthereum (r:1 w:0)
    /// Proof: CrossChainBridge AssetToEthereum (max_values: None, max_size: Some(52), added: 2527, mode: MaxEncodedLen)
    /// Storage: CrossChainBridge BridgedTokens (r:1 w:1)
    /// Proof: CrossChainBridge BridgedTokens (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
    /// Storage: Assets Asset (r:1 w:1)
    /// Proof: Assets Asset (max_values: None, max_size: Some(210), added: 2685, mode: MaxEncodedLen)
    /// Storage: Assets Account (r:1 w:1)
    /// Proof: Assets Account (max_values: None, max_size: Some(134), added: 2609, mode: MaxEncodedLen)
    fn burn_tokens() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `485`
        //  Estimated: `3675`
        // Minimum execution time: 30_000_000 picoseconds.
        Weight::from_parts(31_000_000, 3675)
            .saturating_add(T::DbWeight::get().reads(4_u64))
            .saturating_add(T::DbWeight::get().writes(3_u64))
    }

    /// Storage: CrossChainBridge Validators (r:1 w:1)
    /// Proof: CrossChainBridge Validators (max_values: None, max_size: Some(64), added: 2539, mode: MaxEncodedLen)
    /// Storage: CrossChainBridge ValidatorList (r:1 w:1)
    /// Proof: CrossChainBridge ValidatorList (max_values: Some(1), max_size: Some(3202), added: 3697, mode: MaxEncodedLen)
    fn add_validator() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `109`
        //  Estimated: `4687`
        // Minimum execution time: 15_000_000 picoseconds.
        Weight::from_parts(16_000_000, 4687)
            .saturating_add(T::DbWeight::get().reads(2_u64))
            .saturating_add(T::DbWeight::get().writes(2_u64))
    }

    /// Storage: CrossChainBridge Validators (r:1 w:1)
    /// Proof: CrossChainBridge Validators (max_values: None, max_size: Some(64), added: 2539, mode: MaxEncodedLen)
    /// Storage: CrossChainBridge ValidatorList (r:1 w:1)
    /// Proof: CrossChainBridge ValidatorList (max_values: Some(1), max_size: Some(3202), added: 3697, mode: MaxEncodedLen)
    /// Storage: CrossChainBridge Threshold (r:1 w:0)
    /// Proof: CrossChainBridge Threshold (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
    fn remove_validator() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `177`
        //  Estimated: `4687`
        // Minimum execution time: 18_000_000 picoseconds.
        Weight::from_parts(19_000_000, 4687)
            .saturating_add(T::DbWeight::get().reads(3_u64))
            .saturating_add(T::DbWeight::get().writes(2_u64))
    }

    /// Storage: CrossChainBridge Threshold (r:0 w:1)
    /// Proof: CrossChainBridge Threshold (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
    fn update_threshold() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 8_000_000 picoseconds.
        Weight::from_parts(9_000_000, 0)
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }
}

// For backwards compatibility and tests
impl WeightInfo for () {
    fn register_token() -> Weight {
        Weight::from_parts(26_000_000, 3675)
            .saturating_add(RocksDbWeight::get().reads(3_u64))
            .saturating_add(RocksDbWeight::get().writes(3_u64))
    }

    fn mint_tokens() -> Weight {
        Weight::from_parts(36_000_000, 3675)
            .saturating_add(RocksDbWeight::get().reads(4_u64))
            .saturating_add(RocksDbWeight::get().writes(4_u64))
    }

    fn burn_tokens() -> Weight {
        Weight::from_parts(31_000_000, 3675)
            .saturating_add(RocksDbWeight::get().reads(4_u64))
            .saturating_add(RocksDbWeight::get().writes(3_u64))
    }

    fn add_validator() -> Weight {
        Weight::from_parts(16_000_000, 4687)
            .saturating_add(RocksDbWeight::get().reads(2_u64))
            .saturating_add(RocksDbWeight::get().writes(2_u64))
    }

    fn remove_validator() -> Weight {
        Weight::from_parts(19_000_000, 4687)
            .saturating_add(RocksDbWeight::get().reads(3_u64))
            .saturating_add(RocksDbWeight::get().writes(2_u64))
    }

    fn update_threshold() -> Weight {
        Weight::from_parts(9_000_000, 0)
            .saturating_add(RocksDbWeight::get().writes(1_u64))
    }
}
